{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/cyanstyle/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/js/navigation.js","path":"js/navigation.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/js/jquery-3.3.1.min.js","path":"js/jquery-3.3.1.min.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/cyanstyle/source/css/images/body.jpg","path":"css/images/body.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cyanstyle/LICENSE","hash":"450b2b897f0a46934264ca6467ee4ee9145e6095","modified":1596110376482},{"_id":"themes/cyanstyle/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1596110376482},{"_id":"themes/cyanstyle/_config.yml","hash":"abc4ba6d2eb6c4b815879d33902bac8990177ba4","modified":1596110376483},{"_id":"themes/cyanstyle/README.md","hash":"368360e0ed5eb943ad4caaf9e6aff8c88833992f","modified":1596110376483},{"_id":"themes/cyanstyle/package.json","hash":"a41065cdd4aa66a70c058e99d250c8b50a9b0787","modified":1596110376487},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1595904839679},{"_id":"source/_posts/第三节---固态盘的闪存转换层.md","hash":"1430a2827f081be29d1d8e213595d31ac8a47ce6","modified":1595991047262},{"_id":"source/_posts/第二节---固态盘的并行性.md","hash":"04d8c6d9e36cc848904c68fc6d186bf0ed8a4b59","modified":1596112822816},{"_id":"source/_posts/闪存存储的重构与系统构建技术.md","hash":"28ad0613a7880bcba3b4d94afd14c0b7c8b2a03f","modified":1595991104073},{"_id":"source/_posts/雅思阅读.md","hash":"ea66cce25aa94a1786fe1162e241591bf9c59cb5","modified":1595830211361},{"_id":"themes/cyanstyle/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1596110376486},{"_id":"themes/cyanstyle/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1596110376486},{"_id":"themes/cyanstyle/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1596110376486},{"_id":"themes/cyanstyle/layout/layout.ejs","hash":"23093cee8cbdb486327ae5b17f7747edae291ddf","modified":1596110376486},{"_id":"themes/cyanstyle/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1596110376486},{"_id":"themes/cyanstyle/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1596110376487},{"_id":"themes/cyanstyle/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1596110376487},{"_id":"themes/cyanstyle/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1596110376487},{"_id":"source/_posts/typora-user-images/image-20200727104727970.png","hash":"37b238c18ed1335929b25227840e65004f1ea995","modified":1595818047982},{"_id":"source/_posts/typora-user-images/image-20200727104730292.png","hash":"37b238c18ed1335929b25227840e65004f1ea995","modified":1595818050298},{"_id":"source/_posts/typora-user-images/image-20200727104800550.png","hash":"37b238c18ed1335929b25227840e65004f1ea995","modified":1595818080556},{"_id":"source/_posts/typora-user-images/image-20200727104812629.png","hash":"463725d4b45fd545712214b865c9fa4ce5f5ae7a","modified":1595818092635},{"_id":"source/_posts/typora-user-images/image-20200727104829101.png","hash":"4cf4ed3803bec62adf2b2c7ce137109b0af6ce0e","modified":1595818109108},{"_id":"source/_posts/typora-user-images/image-20200727104849870.png","hash":"4cf4ed3803bec62adf2b2c7ce137109b0af6ce0e","modified":1595818129876},{"_id":"source/_posts/typora-user-images/image-20200727104913310.png","hash":"f706e9700632f6eba01025511352b5c920fb0a4a","modified":1595818153315},{"_id":"source/_posts/typora-user-images/image-20200727104918894.png","hash":"570ca550ad9cb2dff039f8fbd3ae7e21c35f6c51","modified":1595818158901},{"_id":"source/_posts/typora-user-images/image-20200727104923997.png","hash":"5975407131ed3ef0175fa90224b717f490f96532","modified":1595818164010},{"_id":"source/_posts/typora-user-images/image-20200727153244000.png","hash":"5886d75806c1ea60110861083b2d7f3d61a96e9e","modified":1595835164009},{"_id":"source/_posts/typora-user-images/image-20200727153300274.png","hash":"5886d75806c1ea60110861083b2d7f3d61a96e9e","modified":1595835180281},{"_id":"source/_posts/typora-user-images/image-20200728112733090.png","hash":"db1edc60f1b223465d482e72362d6b65080ab63d","modified":1595906853117},{"_id":"source/_posts/typora-user-images/image-20200728112959994.png","hash":"a82ba7b056baea74dd2ccbbeacf66b50827a0e0a","modified":1595907000018},{"_id":"source/_posts/typora-user-images/image-20200728150016691.png","hash":"72446aa30056d36215b711b82b6133983b928c9a","modified":1595919616715},{"_id":"source/_posts/typora-user-images/image-20200728153338434.png","hash":"4ef36433c34ae975ff0adde4df80f0b9b45172a2","modified":1595921618450},{"_id":"source/_posts/typora-user-images/image-20200728153640941.png","hash":"0292362ad774e509ac4a368c9c4d57928dce209e","modified":1595921800959},{"_id":"source/_posts/typora-user-images/image-20200728153848963.png","hash":"2b66747efe081e83ddf42745951f0b6f2b8039d9","modified":1595921928980},{"_id":"themes/cyanstyle/layout/_partial/after-footer.ejs","hash":"9ddfe05f5e9b47112fb0a33c96e7d39c1f1b9afb","modified":1596110376483},{"_id":"themes/cyanstyle/layout/_partial/archive-post.ejs","hash":"624907b4acdc7e805a7b63bd3defef2afce90be8","modified":1596110376483},{"_id":"themes/cyanstyle/layout/_partial/archive.ejs","hash":"72dcd7808824e88f1156f190940e119fe87383fa","modified":1596110376483},{"_id":"themes/cyanstyle/layout/_partial/article.ejs","hash":"3436ae8d93c99be44ebc2c184be05ab6a67add27","modified":1596110376483},{"_id":"themes/cyanstyle/layout/_partial/comment.ejs","hash":"96ed6cddb410e4255935c3017b88be08485604e8","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/footer.ejs","hash":"0feb0dfb0d78dc9e695565320e60eb714eba8894","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/head.ejs","hash":"d28659a632bbc3f02721f7daad6b1c27cde3254c","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/header.ejs","hash":"af500d0bc04fc499a4eb50817859025bc00c19ed","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/sidebar.ejs","hash":"93f64ba48f4e3c50b5aaf6025812a76dd849ccaf","modified":1596110376485},{"_id":"themes/cyanstyle/layout/_widget/archive.ejs","hash":"a28ae3646d876a4ef2d7f3aa5e1e26d3219f6f82","modified":1596110376485},{"_id":"themes/cyanstyle/layout/_widget/category.ejs","hash":"75837a30bea06d0c525cae1e4002bb617e85b075","modified":1596110376485},{"_id":"themes/cyanstyle/layout/_widget/music.ejs","hash":"0c111576276628c0bc0d5fffc6fdc65a391eb3a0","modified":1596110376485},{"_id":"themes/cyanstyle/layout/_widget/recent_posts.ejs","hash":"45c6f0afc6b78b4efe57f79cd7a7c95a5057a5f8","modified":1596110376485},{"_id":"themes/cyanstyle/layout/_widget/search.ejs","hash":"f3c2d30e33ad18abe0f596e5d67cfc4c0632d505","modified":1596110376485},{"_id":"themes/cyanstyle/layout/_widget/tag.ejs","hash":"0c4fe2e60c69daa65c8775abff3589eeadf05af6","modified":1596110376486},{"_id":"themes/cyanstyle/layout/_widget/tagcloud.ejs","hash":"968507f2aa235ff224efe139c83c191e8057b1a5","modified":1596110376486},{"_id":"themes/cyanstyle/source/css/style.css","hash":"d151d482ed5af5e2de00ed41b5b7038a72617bc5","modified":1596110376489},{"_id":"themes/cyanstyle/source/js/navigation.js","hash":"675005d8b63ee6a6f735fadc9bd381aa996707a3","modified":1596110376493},{"_id":"themes/cyanstyle/source/js/script.js","hash":"0109a0b3f1a9d40c1e044283baa50367c9c4af0c","modified":1596110376493},{"_id":"themes/cyanstyle/source/js/share.js","hash":"d37e2ba6bb0017ae33a8abfb7f071e1aaedf6101","modified":1596110376493},{"_id":"themes/cyanstyle/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1596110376489},{"_id":"themes/cyanstyle/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1596110376489},{"_id":"themes/cyanstyle/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1596110376490},{"_id":"themes/cyanstyle/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1596110376489},{"_id":"themes/cyanstyle/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1596110376490},{"_id":"themes/cyanstyle/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1596110376490},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1596110376491},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1596110376492},{"_id":"themes/cyanstyle/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1596110376492},{"_id":"themes/cyanstyle/source/js/jquery-3.3.1.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1596110376493},{"_id":"themes/cyanstyle/layout/_partial/post/category.ejs","hash":"cc8b559bdd8998529007383dd43cbadd0d62da76","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/post/date.ejs","hash":"7c9569019c487e19ce302b63f331b51a355aa712","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1596110376484},{"_id":"themes/cyanstyle/layout/_partial/post/nav.ejs","hash":"9f7b89504a9c9e95556354d67997f89212c8d286","modified":1596110376485},{"_id":"themes/cyanstyle/layout/_partial/post/tag.ejs","hash":"6903b6961ed82ecd4211bf39a6d846c0ae99559a","modified":1596110376485},{"_id":"themes/cyanstyle/layout/_partial/post/title.ejs","hash":"8ab246a55a321deaf1158f198adb4117e80fe788","modified":1596110376485},{"_id":"themes/cyanstyle/source/css/images/favicon.ico","hash":"b5b7667c7358e7300c4772d481e556b003716dab","modified":1596110376488},{"_id":"themes/cyanstyle/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1596110376490},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1596110376490},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1596110376491},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1596110376491},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1596110376491},{"_id":"themes/cyanstyle/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1596110376491},{"_id":"source/_posts/typora-user-images/image-20200728102101042.png","hash":"3b2381734091318626cc6a852333eeb4238c0941","modified":1595902861095},{"_id":"themes/cyanstyle/source/css/images/body.jpg","hash":"92743ba769bb7a7de8e93a418ed36c89e60bc639","modified":1596110376488},{"_id":"source/_posts/typora-user-images/image-20200727154656637.png","hash":"bd1dcc3c7bbe74317cbf4d841fd823dd24465511","modified":1595836016686},{"_id":"source/_posts/typora-user-images/image-20200727154203227.png","hash":"bfb14dc8b22b0617f8bdcd1cc78ca4a4fba79fc0","modified":1595835723280},{"_id":"source/_posts/typora-user-images/image-20200727165835938.png","hash":"0be6e9a17a9f747e6edb8cf09c56a4684a48a99c","modified":1595840316014},{"_id":"source/_posts/typora-user-images/image-20200727170522240.png","hash":"640df3c1d400c175ce0e7db58e458697748d46fb","modified":1595840722302},{"_id":"source/_posts/typora-user-images/image-20200727154009259.png","hash":"a11a1dd07915f0d36de7595db06df5b128670329","modified":1595835609312},{"_id":"source/_posts/typora-user-images/image-20200727154342306.png","hash":"6749b48fbbce84f60eba64157f448d812954d941","modified":1595835822374},{"_id":"source/_posts/typora-user-images/image-20200727154528371.png","hash":"ad92f9de1d8945d3f3f5f380948a812810dbe5e4","modified":1595835928459},{"_id":"source/_posts/typora-user-images/image-20200727154538555.png","hash":"e011311ac0779cca58f407c20286a39eea27404d","modified":1595835938638},{"_id":"source/_posts/typora-user-images/image-20200727161112234.png","hash":"6f84c21c25898ebebe865d34edb9ce4af1ff0041","modified":1595837472305},{"_id":"source/_posts/typora-user-images/image-20200727164122872.png","hash":"933a89f2d83c8bd53dbfd0b3c40140444d7c1091","modified":1595839282939},{"_id":"source/_posts/typora-user-images/image-20200727162451064.png","hash":"cba99eee0290ea901f756a4a8e9f63062dc9c334","modified":1595838291158},{"_id":"source/_posts/typora-user-images/image-20200727161107887.png","hash":"6f84c21c25898ebebe865d34edb9ce4af1ff0041","modified":1595837467958},{"_id":"public/2020/07/29/雅思阅读/index.html","hash":"98813fd59ff8120e1de855f454f328ffbb559cd5","modified":1596112844023},{"_id":"public/2020/07/29/闪存存储的重构与系统构建技术/index.html","hash":"8684356fb4ef4b5e585caade7a6eb0e82c199b82","modified":1596112844023},{"_id":"public/2020/07/29/第三节---固态盘的闪存转换层/index.html","hash":"3f2c1198bb344ae0af18ec9d55c7180f21c4e0a9","modified":1596112844023},{"_id":"public/2020/07/29/hello-world/index.html","hash":"5aea3e6c72e99d37a6e516678057fc7b8af73d89","modified":1596112844023},{"_id":"public/archives/index.html","hash":"1ae5dff9368be01a4da88b924ee7e2625625a8e0","modified":1596112844023},{"_id":"public/archives/2013/index.html","hash":"a5687d3568825abdf7b44f74828afa93de5d5e71","modified":1596112844023},{"_id":"public/archives/2013/07/index.html","hash":"ffb6938edeb57923af5bfadbfe395e623ede2fc8","modified":1596112844023},{"_id":"public/archives/2020/index.html","hash":"27daff1a6386fff2bfc0ef758a57501859113ceb","modified":1596112844023},{"_id":"public/archives/2020/07/index.html","hash":"17332b8e07ba3bceb24544869849912745c8c375","modified":1596112844023},{"_id":"public/2013/07/13/第二节---固态盘的并行性/index.html","hash":"ae51e1ab5327d81a1d008f9af646901d66c3ae5c","modified":1596112844023},{"_id":"public/index.html","hash":"44c30a82af807accff0e348ae34c74e5a7c4a01b","modified":1596112844023},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1596112844023},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1596112844023},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1596112844023},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1596112844023},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1596112844023},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1596112844023},{"_id":"public/css/images/favicon.ico","hash":"b5b7667c7358e7300c4772d481e556b003716dab","modified":1596112844023},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1596112844023},{"_id":"public/css/images/body.jpg","hash":"92743ba769bb7a7de8e93a418ed36c89e60bc639","modified":1596112844023},{"_id":"public/js/navigation.js","hash":"d3274e55aa315efa43cc6a2c0941c7e73acdbf0a","modified":1596112844023},{"_id":"public/js/script.js","hash":"3ce5942cb952256b75767c85af87b17ef2c20be3","modified":1596112844023},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1596112844023},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1596112844023},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1596112844023},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1596112844023},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1596112844023},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1596112844023},{"_id":"public/css/style.css","hash":"d6568d25ce8bd84b6ce45b16f628edf97df9a111","modified":1596112844023},{"_id":"public/js/share.js","hash":"86cf11efa35c5c6c68ba4f254541b5890974cc2b","modified":1596112844023},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1596112844023},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1596112844023},{"_id":"public/js/jquery-3.3.1.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1596112844023}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-07-28T16:51:01.022Z","updated":"2020-07-28T02:53:59.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8sdksb000014v77wgb9d6o","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"_content":"> 高性能固态盘的多级并行性及算法研究---胡洋\n>\n> 针对该论文的学习总结\n\n# 第三节---固态盘的闪存转换层\n\n### 地址映射方法\n\n#### 常见的映射算法\n\n1. 页级映射：一一映射，占用空间大。![image-20200728112733090](.\\typora-user-images\\image-20200728112733090.png)\n2. 块级映射![image-20200728150016691](.\\typora-user-images\\image-20200728150016691.png)存在的问题是，需要频繁的擦写将导致读写性能下降，同时影响寿命。\n3. 混合映射：同时采用块级映射和页级映射。采用页级映射的物理块称之为日志块，采用块级映射的物理块称之为数据块。易知，日志快用来存储热数据；数据块用来存取冷数据。当日志块不够使用（或者过多时）会发生合并操作，可分为三种\n   - 全合并![image-20200728153338434](.\\typora-user-images\\image-20200728153338434.png)需要N次读操作，N次写操作，2次擦除操作，严重影响固态盘性能。\n   - 转换合并![image-20200728153640941](.\\typora-user-images\\image-20200728153640941.png)当日志块中的所有数据按照块内偏移存放，可以直接替代数据块，只需要将原有的数据块擦除即可。\n   - 部分合并![image-20200728153848963](.\\typora-user-images\\image-20200728153848963.png)块内已保存的逻辑页是按照块内偏移存放的，只需要将预下的数据写入日志块即可，再将数据块擦除。\n   - 综上，为了保证性能应尽可能的少使用全合并操作。\n4. DFTL：将具有时间局部性或（与）空间局部性的映射关系保存在内存中，当读写所需的映射可以在内存中检索到时，速度等同于页级映射。但当无法在内存中检索到相关数据时，需要多花费从闪存读取的时间。对于具有良好局部性的服务器DFTL性能损失不大，否则反之。\n\n#### 三层页映射算法\n\n\n\n#### 隐藏翻译过程映射算法\n\n### 垃圾回收算法\n\n### 损耗均衡算法","source":"_posts/第三节---固态盘的闪存转换层.md","raw":"> 高性能固态盘的多级并行性及算法研究---胡洋\n>\n> 针对该论文的学习总结\n\n# 第三节---固态盘的闪存转换层\n\n### 地址映射方法\n\n#### 常见的映射算法\n\n1. 页级映射：一一映射，占用空间大。![image-20200728112733090](.\\typora-user-images\\image-20200728112733090.png)\n2. 块级映射![image-20200728150016691](.\\typora-user-images\\image-20200728150016691.png)存在的问题是，需要频繁的擦写将导致读写性能下降，同时影响寿命。\n3. 混合映射：同时采用块级映射和页级映射。采用页级映射的物理块称之为日志块，采用块级映射的物理块称之为数据块。易知，日志快用来存储热数据；数据块用来存取冷数据。当日志块不够使用（或者过多时）会发生合并操作，可分为三种\n   - 全合并![image-20200728153338434](.\\typora-user-images\\image-20200728153338434.png)需要N次读操作，N次写操作，2次擦除操作，严重影响固态盘性能。\n   - 转换合并![image-20200728153640941](.\\typora-user-images\\image-20200728153640941.png)当日志块中的所有数据按照块内偏移存放，可以直接替代数据块，只需要将原有的数据块擦除即可。\n   - 部分合并![image-20200728153848963](.\\typora-user-images\\image-20200728153848963.png)块内已保存的逻辑页是按照块内偏移存放的，只需要将预下的数据写入日志块即可，再将数据块擦除。\n   - 综上，为了保证性能应尽可能的少使用全合并操作。\n4. DFTL：将具有时间局部性或（与）空间局部性的映射关系保存在内存中，当读写所需的映射可以在内存中检索到时，速度等同于页级映射。但当无法在内存中检索到相关数据时，需要多花费从闪存读取的时间。对于具有良好局部性的服务器DFTL性能损失不大，否则反之。\n\n#### 三层页映射算法\n\n\n\n#### 隐藏翻译过程映射算法\n\n### 垃圾回收算法\n\n### 损耗均衡算法","slug":"第三节---固态盘的闪存转换层","published":1,"date":"2020-07-28T16:51:01.023Z","updated":"2020-07-29T02:50:47.262Z","title":"第三节---固态盘的闪存转换层","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8sdksf000114v71k7kgbqq","content":"<blockquote>\n<p>高性能固态盘的多级并行性及算法研究—胡洋</p>\n<p>针对该论文的学习总结</p>\n</blockquote>\n<h1 id=\"第三节—固态盘的闪存转换层\"><a href=\"#第三节—固态盘的闪存转换层\" class=\"headerlink\" title=\"第三节—固态盘的闪存转换层\"></a>第三节—固态盘的闪存转换层</h1><h3 id=\"地址映射方法\"><a href=\"#地址映射方法\" class=\"headerlink\" title=\"地址映射方法\"></a>地址映射方法</h3><h4 id=\"常见的映射算法\"><a href=\"#常见的映射算法\" class=\"headerlink\" title=\"常见的映射算法\"></a>常见的映射算法</h4><ol>\n<li>页级映射：一一映射，占用空间大。<img src=\".%5Ctypora-user-images%5Cimage-20200728112733090.png\" alt=\"image-20200728112733090\"></li>\n<li>块级映射<img src=\".%5Ctypora-user-images%5Cimage-20200728150016691.png\" alt=\"image-20200728150016691\">存在的问题是，需要频繁的擦写将导致读写性能下降，同时影响寿命。</li>\n<li>混合映射：同时采用块级映射和页级映射。采用页级映射的物理块称之为日志块，采用块级映射的物理块称之为数据块。易知，日志快用来存储热数据；数据块用来存取冷数据。当日志块不够使用（或者过多时）会发生合并操作，可分为三种<ul>\n<li>全合并<img src=\".%5Ctypora-user-images%5Cimage-20200728153338434.png\" alt=\"image-20200728153338434\">需要N次读操作，N次写操作，2次擦除操作，严重影响固态盘性能。</li>\n<li>转换合并<img src=\".%5Ctypora-user-images%5Cimage-20200728153640941.png\" alt=\"image-20200728153640941\">当日志块中的所有数据按照块内偏移存放，可以直接替代数据块，只需要将原有的数据块擦除即可。</li>\n<li>部分合并<img src=\".%5Ctypora-user-images%5Cimage-20200728153848963.png\" alt=\"image-20200728153848963\">块内已保存的逻辑页是按照块内偏移存放的，只需要将预下的数据写入日志块即可，再将数据块擦除。</li>\n<li>综上，为了保证性能应尽可能的少使用全合并操作。</li>\n</ul>\n</li>\n<li>DFTL：将具有时间局部性或（与）空间局部性的映射关系保存在内存中，当读写所需的映射可以在内存中检索到时，速度等同于页级映射。但当无法在内存中检索到相关数据时，需要多花费从闪存读取的时间。对于具有良好局部性的服务器DFTL性能损失不大，否则反之。</li>\n</ol>\n<h4 id=\"三层页映射算法\"><a href=\"#三层页映射算法\" class=\"headerlink\" title=\"三层页映射算法\"></a>三层页映射算法</h4><h4 id=\"隐藏翻译过程映射算法\"><a href=\"#隐藏翻译过程映射算法\" class=\"headerlink\" title=\"隐藏翻译过程映射算法\"></a>隐藏翻译过程映射算法</h4><h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><h3 id=\"损耗均衡算法\"><a href=\"#损耗均衡算法\" class=\"headerlink\" title=\"损耗均衡算法\"></a>损耗均衡算法</h3>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>高性能固态盘的多级并行性及算法研究—胡洋</p>\n<p>针对该论文的学习总结</p>\n</blockquote>\n<h1 id=\"第三节—固态盘的闪存转换层\"><a href=\"#第三节—固态盘的闪存转换层\" class=\"headerlink\" title=\"第三节—固态盘的闪存转换层\"></a>第三节—固态盘的闪存转换层</h1><h3 id=\"地址映射方法\"><a href=\"#地址映射方法\" class=\"headerlink\" title=\"地址映射方法\"></a>地址映射方法</h3><h4 id=\"常见的映射算法\"><a href=\"#常见的映射算法\" class=\"headerlink\" title=\"常见的映射算法\"></a>常见的映射算法</h4><ol>\n<li>页级映射：一一映射，占用空间大。<img src=\".%5Ctypora-user-images%5Cimage-20200728112733090.png\" alt=\"image-20200728112733090\"></li>\n<li>块级映射<img src=\".%5Ctypora-user-images%5Cimage-20200728150016691.png\" alt=\"image-20200728150016691\">存在的问题是，需要频繁的擦写将导致读写性能下降，同时影响寿命。</li>\n<li>混合映射：同时采用块级映射和页级映射。采用页级映射的物理块称之为日志块，采用块级映射的物理块称之为数据块。易知，日志快用来存储热数据；数据块用来存取冷数据。当日志块不够使用（或者过多时）会发生合并操作，可分为三种<ul>\n<li>全合并<img src=\".%5Ctypora-user-images%5Cimage-20200728153338434.png\" alt=\"image-20200728153338434\">需要N次读操作，N次写操作，2次擦除操作，严重影响固态盘性能。</li>\n<li>转换合并<img src=\".%5Ctypora-user-images%5Cimage-20200728153640941.png\" alt=\"image-20200728153640941\">当日志块中的所有数据按照块内偏移存放，可以直接替代数据块，只需要将原有的数据块擦除即可。</li>\n<li>部分合并<img src=\".%5Ctypora-user-images%5Cimage-20200728153848963.png\" alt=\"image-20200728153848963\">块内已保存的逻辑页是按照块内偏移存放的，只需要将预下的数据写入日志块即可，再将数据块擦除。</li>\n<li>综上，为了保证性能应尽可能的少使用全合并操作。</li>\n</ul>\n</li>\n<li>DFTL：将具有时间局部性或（与）空间局部性的映射关系保存在内存中，当读写所需的映射可以在内存中检索到时，速度等同于页级映射。但当无法在内存中检索到相关数据时，需要多花费从闪存读取的时间。对于具有良好局部性的服务器DFTL性能损失不大，否则反之。</li>\n</ol>\n<h4 id=\"三层页映射算法\"><a href=\"#三层页映射算法\" class=\"headerlink\" title=\"三层页映射算法\"></a>三层页映射算法</h4><h4 id=\"隐藏翻译过程映射算法\"><a href=\"#隐藏翻译过程映射算法\" class=\"headerlink\" title=\"隐藏翻译过程映射算法\"></a>隐藏翻译过程映射算法</h4><h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><h3 id=\"损耗均衡算法\"><a href=\"#损耗均衡算法\" class=\"headerlink\" title=\"损耗均衡算法\"></a>损耗均衡算法</h3>"},{"_content":"# 雅思阅读\n\n## test 1\n\n### 词汇\n\n- brick by brick\t\t\t\t一点一点地砌\n- fairy-tale turrets          童话般的塔楼\n- wicked witches           邪恶的女巫\n- gallant                      英勇的\n- enchanting world        迷人的世界\n- capacity for creativity  创造的能力\n- repercussions             反响\n- playing school            玩小游戏\n- regulate her emotions through pretence  通过伪装来控制她的情绪\n- play in all its rich variety  在它所有的丰富变化中\n- faculty                      科，系；能力；全体教员\n- underpins                  构成加固\n- crucial                      至关紧要的\n- two millennia ago       两千年前\n- extolled its virtues      赞扬其优点\n- mindful                    留心的\n- scarce                      adj. 缺乏的，不足的；稀有的  adv. 仅仅；几乎不；几乎没有\n- curtailed                  简略；缩减；剥夺\n- perceptions              认知；观念\n- emphasis                 重点；强调；加强语气\n- international body     国际机构  \n- leisure facilities        娱乐消遣设施休闲设施\n- child-initialed          儿童的天性\n- intervened               调停；干涉干；预\n- puzzle                    迷惑，（使）困惑；（因迷惑）而苦思；使……为难\n- facilitate                 促进；帮助；使容易\n- aspect                     方面体样子面貌\n- academic performance  学习成绩；学业表现；学术成就\n- indicator                  指标，标志，迹象； 指示器\n- clues                       线索，蛛丝马迹；提示，暗示\n- diagnosis                 诊断诊分析\n- neurodevelopmental disorder   神经发育障碍\n- autism                   孤独症，自闭症；臆想\n- playful stimulus      好玩的刺激\n- instructional           教学的；指导的，教育的\n- dolls representing   娃娃代表\n- Lego                    乐高\n- backwater             死水\n- landscape             风景\n- trivial                  不重要的，琐碎的；琐细的\n- fundamental        adj. 基本的，根本的         n. 基本原理；基本原则\n\n### 用法\n\n1. a rich diet of play experiences\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/雅思阅读.md","raw":"# 雅思阅读\n\n## test 1\n\n### 词汇\n\n- brick by brick\t\t\t\t一点一点地砌\n- fairy-tale turrets          童话般的塔楼\n- wicked witches           邪恶的女巫\n- gallant                      英勇的\n- enchanting world        迷人的世界\n- capacity for creativity  创造的能力\n- repercussions             反响\n- playing school            玩小游戏\n- regulate her emotions through pretence  通过伪装来控制她的情绪\n- play in all its rich variety  在它所有的丰富变化中\n- faculty                      科，系；能力；全体教员\n- underpins                  构成加固\n- crucial                      至关紧要的\n- two millennia ago       两千年前\n- extolled its virtues      赞扬其优点\n- mindful                    留心的\n- scarce                      adj. 缺乏的，不足的；稀有的  adv. 仅仅；几乎不；几乎没有\n- curtailed                  简略；缩减；剥夺\n- perceptions              认知；观念\n- emphasis                 重点；强调；加强语气\n- international body     国际机构  \n- leisure facilities        娱乐消遣设施休闲设施\n- child-initialed          儿童的天性\n- intervened               调停；干涉干；预\n- puzzle                    迷惑，（使）困惑；（因迷惑）而苦思；使……为难\n- facilitate                 促进；帮助；使容易\n- aspect                     方面体样子面貌\n- academic performance  学习成绩；学业表现；学术成就\n- indicator                  指标，标志，迹象； 指示器\n- clues                       线索，蛛丝马迹；提示，暗示\n- diagnosis                 诊断诊分析\n- neurodevelopmental disorder   神经发育障碍\n- autism                   孤独症，自闭症；臆想\n- playful stimulus      好玩的刺激\n- instructional           教学的；指导的，教育的\n- dolls representing   娃娃代表\n- Lego                    乐高\n- backwater             死水\n- landscape             风景\n- trivial                  不重要的，琐碎的；琐细的\n- fundamental        adj. 基本的，根本的         n. 基本原理；基本原则\n\n### 用法\n\n1. a rich diet of play experiences\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"雅思阅读","published":1,"date":"2020-07-28T16:51:01.028Z","updated":"2020-07-27T06:10:11.361Z","title":"雅思阅读","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8sdksh000214v7hgil33i7","content":"<h1 id=\"雅思阅读\"><a href=\"#雅思阅读\" class=\"headerlink\" title=\"雅思阅读\"></a>雅思阅读</h1><h2 id=\"test-1\"><a href=\"#test-1\" class=\"headerlink\" title=\"test 1\"></a>test 1</h2><h3 id=\"词汇\"><a href=\"#词汇\" class=\"headerlink\" title=\"词汇\"></a>词汇</h3><ul>\n<li>brick by brick                一点一点地砌</li>\n<li>fairy-tale turrets          童话般的塔楼</li>\n<li>wicked witches           邪恶的女巫</li>\n<li>gallant                      英勇的</li>\n<li>enchanting world        迷人的世界</li>\n<li>capacity for creativity  创造的能力</li>\n<li>repercussions             反响</li>\n<li>playing school            玩小游戏</li>\n<li>regulate her emotions through pretence  通过伪装来控制她的情绪</li>\n<li>play in all its rich variety  在它所有的丰富变化中</li>\n<li>faculty                      科，系；能力；全体教员</li>\n<li>underpins                  构成加固</li>\n<li>crucial                      至关紧要的</li>\n<li>two millennia ago       两千年前</li>\n<li>extolled its virtues      赞扬其优点</li>\n<li>mindful                    留心的</li>\n<li>scarce                      adj. 缺乏的，不足的；稀有的  adv. 仅仅；几乎不；几乎没有</li>\n<li>curtailed                  简略；缩减；剥夺</li>\n<li>perceptions              认知；观念</li>\n<li>emphasis                 重点；强调；加强语气</li>\n<li>international body     国际机构  </li>\n<li>leisure facilities        娱乐消遣设施休闲设施</li>\n<li>child-initialed          儿童的天性</li>\n<li>intervened               调停；干涉干；预</li>\n<li>puzzle                    迷惑，（使）困惑；（因迷惑）而苦思；使……为难</li>\n<li>facilitate                 促进；帮助；使容易</li>\n<li>aspect                     方面体样子面貌</li>\n<li>academic performance  学习成绩；学业表现；学术成就</li>\n<li>indicator                  指标，标志，迹象； 指示器</li>\n<li>clues                       线索，蛛丝马迹；提示，暗示</li>\n<li>diagnosis                 诊断诊分析</li>\n<li>neurodevelopmental disorder   神经发育障碍</li>\n<li>autism                   孤独症，自闭症；臆想</li>\n<li>playful stimulus      好玩的刺激</li>\n<li>instructional           教学的；指导的，教育的</li>\n<li>dolls representing   娃娃代表</li>\n<li>Lego                    乐高</li>\n<li>backwater             死水</li>\n<li>landscape             风景</li>\n<li>trivial                  不重要的，琐碎的；琐细的</li>\n<li>fundamental        adj. 基本的，根本的         n. 基本原理；基本原则</li>\n</ul>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ol>\n<li>a rich diet of play experiences</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"雅思阅读\"><a href=\"#雅思阅读\" class=\"headerlink\" title=\"雅思阅读\"></a>雅思阅读</h1><h2 id=\"test-1\"><a href=\"#test-1\" class=\"headerlink\" title=\"test 1\"></a>test 1</h2><h3 id=\"词汇\"><a href=\"#词汇\" class=\"headerlink\" title=\"词汇\"></a>词汇</h3><ul>\n<li>brick by brick                一点一点地砌</li>\n<li>fairy-tale turrets          童话般的塔楼</li>\n<li>wicked witches           邪恶的女巫</li>\n<li>gallant                      英勇的</li>\n<li>enchanting world        迷人的世界</li>\n<li>capacity for creativity  创造的能力</li>\n<li>repercussions             反响</li>\n<li>playing school            玩小游戏</li>\n<li>regulate her emotions through pretence  通过伪装来控制她的情绪</li>\n<li>play in all its rich variety  在它所有的丰富变化中</li>\n<li>faculty                      科，系；能力；全体教员</li>\n<li>underpins                  构成加固</li>\n<li>crucial                      至关紧要的</li>\n<li>two millennia ago       两千年前</li>\n<li>extolled its virtues      赞扬其优点</li>\n<li>mindful                    留心的</li>\n<li>scarce                      adj. 缺乏的，不足的；稀有的  adv. 仅仅；几乎不；几乎没有</li>\n<li>curtailed                  简略；缩减；剥夺</li>\n<li>perceptions              认知；观念</li>\n<li>emphasis                 重点；强调；加强语气</li>\n<li>international body     国际机构  </li>\n<li>leisure facilities        娱乐消遣设施休闲设施</li>\n<li>child-initialed          儿童的天性</li>\n<li>intervened               调停；干涉干；预</li>\n<li>puzzle                    迷惑，（使）困惑；（因迷惑）而苦思；使……为难</li>\n<li>facilitate                 促进；帮助；使容易</li>\n<li>aspect                     方面体样子面貌</li>\n<li>academic performance  学习成绩；学业表现；学术成就</li>\n<li>indicator                  指标，标志，迹象； 指示器</li>\n<li>clues                       线索，蛛丝马迹；提示，暗示</li>\n<li>diagnosis                 诊断诊分析</li>\n<li>neurodevelopmental disorder   神经发育障碍</li>\n<li>autism                   孤独症，自闭症；臆想</li>\n<li>playful stimulus      好玩的刺激</li>\n<li>instructional           教学的；指导的，教育的</li>\n<li>dolls representing   娃娃代表</li>\n<li>Lego                    乐高</li>\n<li>backwater             死水</li>\n<li>landscape             风景</li>\n<li>trivial                  不重要的，琐碎的；琐细的</li>\n<li>fundamental        adj. 基本的，根本的         n. 基本原理；基本原则</li>\n</ul>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ol>\n<li>a rich diet of play experiences</li>\n</ol>\n"},{"title":"多级并行性","date":"2013-07-13T12:46:25.000Z","_content":"> 高性能固态盘的多级并行性及算法研究---胡洋\n>\n> 针对该论文的学习总结\n\n\n\n[TOC]\n\n\n\n### 四层并行性\n\n\n\n假设有两个通道，每个通道有两个芯片，每个芯片有两个晶圆，每个晶圆有两个分组。\n\n![image-20200727154203227](.\\typora-user-images\\image-20200727154203227.png)\n\n------\n\n命令地址传输时间很短忽略不计（途中出现仅仅作为标志），数据传输的时间开销为5个单位时间，读介质时间开销为2个单位时间，写介质时间开销为20个单位时间。\n\n![image-20200727154009259](.\\typora-user-images\\image-20200727154009259.png)\n\n##### \n\n#### 通道之间的并行\n\n![image-20200727154342306](.\\typora-user-images\\image-20200727154342306.png)\n\n\n\n#### 芯片之间的并行\n\n![image-20200727154528371](.\\typora-user-images\\image-20200727154528371.png)\n\n#### 晶圆之间的并行\n\n![image-20200727154538555](.\\typora-user-images\\image-20200727154538555.png)\n\n#### 分组之间的并行\n\n！！！分组之间的并行性是完全并发，不同于以上三种的并行（类似于流水线处理）\n\n![image-20200727154656637](.\\typora-user-images\\image-20200727154656637.png)\n\n\n\n### 并行性与高级命令\n\n#### 内部数据迁移命令\n\n- 原理作用：对于高并行性的SSD，常常发现占用比例最高的是通道。芯片等的性能受到通道的限制。但是我们可以发现对于和主机没有交互的操作（内部数据的迁移），完全可以不占用通道的流量，从而提高性能。\n\n- 限制：\n\n  1. 使用改命令要求目标的物理页地址的奇偶性相同（猜测：当高电位集中分布时会导致数据错误）\n  2. 同一个物理块内的空闲地址必须连续使用。\n\n-  导致的问题：![image-20200727161112234](.\\typora-user-images\\image-20200727161112234.png)\n\n  第1217页没有使用直接被标记为失效，造成浪费。\n\n-  对存在问题的两种解决方案：\n\n  1. 有条件的使用，不发生有效页的浪费。\n  2. 无条件的使用（贪婪的使用），任何情况下都使用内部迁移指令。\n\n-  结论：方案二即无条件使用一般导致性能的下降，方案一在某些情况下可以提升性能。方案二的优化达不到预期效果是因为产生过多的失效页，导致垃圾回收次数的增加，同时垃圾回收又使用内部数据迁移命令，进一步产生大量失效页，引发恶性循环。![image-20200727162451064](.\\typora-user-images\\image-20200727162451064.png)\n\n#### 多分组操作指令\n\n-  原理作用：利用分组之间的并行性。假设有两个写操作，直接将两个写数据读入某一晶圆的寄存器中，之后再将两个数据同时写入物理页中。\n- 限制：\n  1. 并行的数据必须写入不同分组中具有相同物理块号，物理页号中\n  2. 同一个物理块内的空闲地址必须连续使用。\n-  存在的问题：![image-20200727164122872](.\\typora-user-images\\image-20200727164122872.png)\n-  对存在问题的两种解决方案（失效页的统一处理方案）：\n  1. 有条件的使用，不发生有效页的浪费。\n  2. 无条件的使用（贪婪的使用），任何情况下都使用内部迁移指令。\n-  结论：`与上一条指令结论相反，对性能的优化超过触发垃圾回收的性能损耗。\n\n#### 交错操作命令\n\n- 原理作用：多个晶圆之间的并行（见图2.5）流水操作\n- 限制：并行的指令操作在同个芯片的不同晶圆下。\n- 结论：所以情况下都可以提高性能，且对磨损几乎没有影响，因此贪婪的使用交错操作指令。![image-20200727165835938](.\\typora-user-images\\image-20200727165835938.png)\n\n#### 综合使用高级命令\n\n- 目的：提高并行性\n\n- 三种方案：\n\n  1. 不采用高级命令\n  2. 有条件的使用内部和多分组命令，贪婪的使用的交错命令\n  3. 有条件的使用内部数据迁移命令，贪婪的使用多分组和交错命令\n\n- 结论：![image-20200727170522240](.\\typora-user-images\\image-20200727170522240.png)\n\n  方案3对性能提高最好；方案2性能提升不如方案3，但是其对擦写次数没有增加。综上，对性能敏感时，用方案3；重视SSD寿命时采用方案2.\n\n#### 并行度优先级\n\n- 作用：不同层级的并行存在相互影响的情况，为了使带宽充分利用必须尽可能的让每个器件的使用效率达到最高。\n\n- 排序：通道并行>分组并行>晶圆并行>芯片并行\n\n- > 为保证通道占用率通道优先级最高。\n  >\n  > 当一个写请求需要写个物理，以晶圆并行也可以分组并行，如图![image-20200728102101042](.\\typora-user-images\\image-20200728102101042.png)将总线传输阶段细分成传输命令地址阶段和数传输阶段，相比分组并行，晶圆并行效率更高。多分组采用会导致有效页的损失，但是晶圆的并行只是交错命令，不会导致有效页的损失。\n\n","source":"_posts/第二节---固态盘的并行性.md","raw":"---\ntitle: 多级并行性\ndate: 2013/7/13 20:46:25\n---\n> 高性能固态盘的多级并行性及算法研究---胡洋\n>\n> 针对该论文的学习总结\n\n\n\n[TOC]\n\n\n\n### 四层并行性\n\n\n\n假设有两个通道，每个通道有两个芯片，每个芯片有两个晶圆，每个晶圆有两个分组。\n\n![image-20200727154203227](.\\typora-user-images\\image-20200727154203227.png)\n\n------\n\n命令地址传输时间很短忽略不计（途中出现仅仅作为标志），数据传输的时间开销为5个单位时间，读介质时间开销为2个单位时间，写介质时间开销为20个单位时间。\n\n![image-20200727154009259](.\\typora-user-images\\image-20200727154009259.png)\n\n##### \n\n#### 通道之间的并行\n\n![image-20200727154342306](.\\typora-user-images\\image-20200727154342306.png)\n\n\n\n#### 芯片之间的并行\n\n![image-20200727154528371](.\\typora-user-images\\image-20200727154528371.png)\n\n#### 晶圆之间的并行\n\n![image-20200727154538555](.\\typora-user-images\\image-20200727154538555.png)\n\n#### 分组之间的并行\n\n！！！分组之间的并行性是完全并发，不同于以上三种的并行（类似于流水线处理）\n\n![image-20200727154656637](.\\typora-user-images\\image-20200727154656637.png)\n\n\n\n### 并行性与高级命令\n\n#### 内部数据迁移命令\n\n- 原理作用：对于高并行性的SSD，常常发现占用比例最高的是通道。芯片等的性能受到通道的限制。但是我们可以发现对于和主机没有交互的操作（内部数据的迁移），完全可以不占用通道的流量，从而提高性能。\n\n- 限制：\n\n  1. 使用改命令要求目标的物理页地址的奇偶性相同（猜测：当高电位集中分布时会导致数据错误）\n  2. 同一个物理块内的空闲地址必须连续使用。\n\n-  导致的问题：![image-20200727161112234](.\\typora-user-images\\image-20200727161112234.png)\n\n  第1217页没有使用直接被标记为失效，造成浪费。\n\n-  对存在问题的两种解决方案：\n\n  1. 有条件的使用，不发生有效页的浪费。\n  2. 无条件的使用（贪婪的使用），任何情况下都使用内部迁移指令。\n\n-  结论：方案二即无条件使用一般导致性能的下降，方案一在某些情况下可以提升性能。方案二的优化达不到预期效果是因为产生过多的失效页，导致垃圾回收次数的增加，同时垃圾回收又使用内部数据迁移命令，进一步产生大量失效页，引发恶性循环。![image-20200727162451064](.\\typora-user-images\\image-20200727162451064.png)\n\n#### 多分组操作指令\n\n-  原理作用：利用分组之间的并行性。假设有两个写操作，直接将两个写数据读入某一晶圆的寄存器中，之后再将两个数据同时写入物理页中。\n- 限制：\n  1. 并行的数据必须写入不同分组中具有相同物理块号，物理页号中\n  2. 同一个物理块内的空闲地址必须连续使用。\n-  存在的问题：![image-20200727164122872](.\\typora-user-images\\image-20200727164122872.png)\n-  对存在问题的两种解决方案（失效页的统一处理方案）：\n  1. 有条件的使用，不发生有效页的浪费。\n  2. 无条件的使用（贪婪的使用），任何情况下都使用内部迁移指令。\n-  结论：`与上一条指令结论相反，对性能的优化超过触发垃圾回收的性能损耗。\n\n#### 交错操作命令\n\n- 原理作用：多个晶圆之间的并行（见图2.5）流水操作\n- 限制：并行的指令操作在同个芯片的不同晶圆下。\n- 结论：所以情况下都可以提高性能，且对磨损几乎没有影响，因此贪婪的使用交错操作指令。![image-20200727165835938](.\\typora-user-images\\image-20200727165835938.png)\n\n#### 综合使用高级命令\n\n- 目的：提高并行性\n\n- 三种方案：\n\n  1. 不采用高级命令\n  2. 有条件的使用内部和多分组命令，贪婪的使用的交错命令\n  3. 有条件的使用内部数据迁移命令，贪婪的使用多分组和交错命令\n\n- 结论：![image-20200727170522240](.\\typora-user-images\\image-20200727170522240.png)\n\n  方案3对性能提高最好；方案2性能提升不如方案3，但是其对擦写次数没有增加。综上，对性能敏感时，用方案3；重视SSD寿命时采用方案2.\n\n#### 并行度优先级\n\n- 作用：不同层级的并行存在相互影响的情况，为了使带宽充分利用必须尽可能的让每个器件的使用效率达到最高。\n\n- 排序：通道并行>分组并行>晶圆并行>芯片并行\n\n- > 为保证通道占用率通道优先级最高。\n  >\n  > 当一个写请求需要写个物理，以晶圆并行也可以分组并行，如图![image-20200728102101042](.\\typora-user-images\\image-20200728102101042.png)将总线传输阶段细分成传输命令地址阶段和数传输阶段，相比分组并行，晶圆并行效率更高。多分组采用会导致有效页的损失，但是晶圆的并行只是交错命令，不会导致有效页的损失。\n\n","slug":"第二节---固态盘的并行性","published":1,"updated":"2020-07-30T12:40:22.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8sdksi000314v7d3qngfj4","content":"<blockquote>\n<p>高性能固态盘的多级并行性及算法研究—胡洋</p>\n<p>针对该论文的学习总结</p>\n</blockquote>\n<p>[TOC]</p>\n<h3 id=\"四层并行性\"><a href=\"#四层并行性\" class=\"headerlink\" title=\"四层并行性\"></a>四层并行性</h3><p>假设有两个通道，每个通道有两个芯片，每个芯片有两个晶圆，每个晶圆有两个分组。</p>\n<p><img src=\".%5Ctypora-user-images%5Cimage-20200727154203227.png\" alt=\"image-20200727154203227\"></p>\n<hr>\n<p>命令地址传输时间很短忽略不计（途中出现仅仅作为标志），数据传输的时间开销为5个单位时间，读介质时间开销为2个单位时间，写介质时间开销为20个单位时间。</p>\n<p><img src=\".%5Ctypora-user-images%5Cimage-20200727154009259.png\" alt=\"image-20200727154009259\"></p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h4 id=\"通道之间的并行\"><a href=\"#通道之间的并行\" class=\"headerlink\" title=\"通道之间的并行\"></a>通道之间的并行</h4><p><img src=\".%5Ctypora-user-images%5Cimage-20200727154342306.png\" alt=\"image-20200727154342306\"></p>\n<h4 id=\"芯片之间的并行\"><a href=\"#芯片之间的并行\" class=\"headerlink\" title=\"芯片之间的并行\"></a>芯片之间的并行</h4><p><img src=\".%5Ctypora-user-images%5Cimage-20200727154528371.png\" alt=\"image-20200727154528371\"></p>\n<h4 id=\"晶圆之间的并行\"><a href=\"#晶圆之间的并行\" class=\"headerlink\" title=\"晶圆之间的并行\"></a>晶圆之间的并行</h4><p><img src=\".%5Ctypora-user-images%5Cimage-20200727154538555.png\" alt=\"image-20200727154538555\"></p>\n<h4 id=\"分组之间的并行\"><a href=\"#分组之间的并行\" class=\"headerlink\" title=\"分组之间的并行\"></a>分组之间的并行</h4><p>！！！分组之间的并行性是完全并发，不同于以上三种的并行（类似于流水线处理）</p>\n<p><img src=\".%5Ctypora-user-images%5Cimage-20200727154656637.png\" alt=\"image-20200727154656637\"></p>\n<h3 id=\"并行性与高级命令\"><a href=\"#并行性与高级命令\" class=\"headerlink\" title=\"并行性与高级命令\"></a>并行性与高级命令</h3><h4 id=\"内部数据迁移命令\"><a href=\"#内部数据迁移命令\" class=\"headerlink\" title=\"内部数据迁移命令\"></a>内部数据迁移命令</h4><ul>\n<li><p>原理作用：对于高并行性的SSD，常常发现占用比例最高的是通道。芯片等的性能受到通道的限制。但是我们可以发现对于和主机没有交互的操作（内部数据的迁移），完全可以不占用通道的流量，从而提高性能。</p>\n</li>\n<li><p>限制：</p>\n<ol>\n<li>使用改命令要求目标的物理页地址的奇偶性相同（猜测：当高电位集中分布时会导致数据错误）</li>\n<li>同一个物理块内的空闲地址必须连续使用。</li>\n</ol>\n</li>\n<li><p>导致的问题：<img src=\".%5Ctypora-user-images%5Cimage-20200727161112234.png\" alt=\"image-20200727161112234\"></p>\n<p>第1217页没有使用直接被标记为失效，造成浪费。</p>\n</li>\n<li><p>对存在问题的两种解决方案：</p>\n<ol>\n<li>有条件的使用，不发生有效页的浪费。</li>\n<li>无条件的使用（贪婪的使用），任何情况下都使用内部迁移指令。</li>\n</ol>\n</li>\n<li><p>结论：方案二即无条件使用一般导致性能的下降，方案一在某些情况下可以提升性能。方案二的优化达不到预期效果是因为产生过多的失效页，导致垃圾回收次数的增加，同时垃圾回收又使用内部数据迁移命令，进一步产生大量失效页，引发恶性循环。<img src=\".%5Ctypora-user-images%5Cimage-20200727162451064.png\" alt=\"image-20200727162451064\"></p>\n</li>\n</ul>\n<h4 id=\"多分组操作指令\"><a href=\"#多分组操作指令\" class=\"headerlink\" title=\"多分组操作指令\"></a>多分组操作指令</h4><ul>\n<li>原理作用：利用分组之间的并行性。假设有两个写操作，直接将两个写数据读入某一晶圆的寄存器中，之后再将两个数据同时写入物理页中。</li>\n<li>限制：<ol>\n<li>并行的数据必须写入不同分组中具有相同物理块号，物理页号中</li>\n<li>同一个物理块内的空闲地址必须连续使用。</li>\n</ol>\n</li>\n<li>存在的问题：<img src=\".%5Ctypora-user-images%5Cimage-20200727164122872.png\" alt=\"image-20200727164122872\"></li>\n<li>对存在问题的两种解决方案（失效页的统一处理方案）：<ol>\n<li>有条件的使用，不发生有效页的浪费。</li>\n<li>无条件的使用（贪婪的使用），任何情况下都使用内部迁移指令。</li>\n</ol>\n</li>\n<li>结论：`与上一条指令结论相反，对性能的优化超过触发垃圾回收的性能损耗。</li>\n</ul>\n<h4 id=\"交错操作命令\"><a href=\"#交错操作命令\" class=\"headerlink\" title=\"交错操作命令\"></a>交错操作命令</h4><ul>\n<li>原理作用：多个晶圆之间的并行（见图2.5）流水操作</li>\n<li>限制：并行的指令操作在同个芯片的不同晶圆下。</li>\n<li>结论：所以情况下都可以提高性能，且对磨损几乎没有影响，因此贪婪的使用交错操作指令。<img src=\".%5Ctypora-user-images%5Cimage-20200727165835938.png\" alt=\"image-20200727165835938\"></li>\n</ul>\n<h4 id=\"综合使用高级命令\"><a href=\"#综合使用高级命令\" class=\"headerlink\" title=\"综合使用高级命令\"></a>综合使用高级命令</h4><ul>\n<li><p>目的：提高并行性</p>\n</li>\n<li><p>三种方案：</p>\n<ol>\n<li>不采用高级命令</li>\n<li>有条件的使用内部和多分组命令，贪婪的使用的交错命令</li>\n<li>有条件的使用内部数据迁移命令，贪婪的使用多分组和交错命令</li>\n</ol>\n</li>\n<li><p>结论：<img src=\".%5Ctypora-user-images%5Cimage-20200727170522240.png\" alt=\"image-20200727170522240\"></p>\n<p>方案3对性能提高最好；方案2性能提升不如方案3，但是其对擦写次数没有增加。综上，对性能敏感时，用方案3；重视SSD寿命时采用方案2.</p>\n</li>\n</ul>\n<h4 id=\"并行度优先级\"><a href=\"#并行度优先级\" class=\"headerlink\" title=\"并行度优先级\"></a>并行度优先级</h4><ul>\n<li><p>作用：不同层级的并行存在相互影响的情况，为了使带宽充分利用必须尽可能的让每个器件的使用效率达到最高。</p>\n</li>\n<li><p>排序：通道并行&gt;分组并行&gt;晶圆并行&gt;芯片并行</p>\n</li>\n<li><blockquote>\n<p>为保证通道占用率通道优先级最高。</p>\n<p>当一个写请求需要写个物理，以晶圆并行也可以分组并行，如图<img src=\".%5Ctypora-user-images%5Cimage-20200728102101042.png\" alt=\"image-20200728102101042\">将总线传输阶段细分成传输命令地址阶段和数传输阶段，相比分组并行，晶圆并行效率更高。多分组采用会导致有效页的损失，但是晶圆的并行只是交错命令，不会导致有效页的损失。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>高性能固态盘的多级并行性及算法研究—胡洋</p>\n<p>针对该论文的学习总结</p>\n</blockquote>\n<p>[TOC]</p>\n<h3 id=\"四层并行性\"><a href=\"#四层并行性\" class=\"headerlink\" title=\"四层并行性\"></a>四层并行性</h3><p>假设有两个通道，每个通道有两个芯片，每个芯片有两个晶圆，每个晶圆有两个分组。</p>\n<p><img src=\".%5Ctypora-user-images%5Cimage-20200727154203227.png\" alt=\"image-20200727154203227\"></p>\n<hr>\n<p>命令地址传输时间很短忽略不计（途中出现仅仅作为标志），数据传输的时间开销为5个单位时间，读介质时间开销为2个单位时间，写介质时间开销为20个单位时间。</p>\n<p><img src=\".%5Ctypora-user-images%5Cimage-20200727154009259.png\" alt=\"image-20200727154009259\"></p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h4 id=\"通道之间的并行\"><a href=\"#通道之间的并行\" class=\"headerlink\" title=\"通道之间的并行\"></a>通道之间的并行</h4><p><img src=\".%5Ctypora-user-images%5Cimage-20200727154342306.png\" alt=\"image-20200727154342306\"></p>\n<h4 id=\"芯片之间的并行\"><a href=\"#芯片之间的并行\" class=\"headerlink\" title=\"芯片之间的并行\"></a>芯片之间的并行</h4><p><img src=\".%5Ctypora-user-images%5Cimage-20200727154528371.png\" alt=\"image-20200727154528371\"></p>\n<h4 id=\"晶圆之间的并行\"><a href=\"#晶圆之间的并行\" class=\"headerlink\" title=\"晶圆之间的并行\"></a>晶圆之间的并行</h4><p><img src=\".%5Ctypora-user-images%5Cimage-20200727154538555.png\" alt=\"image-20200727154538555\"></p>\n<h4 id=\"分组之间的并行\"><a href=\"#分组之间的并行\" class=\"headerlink\" title=\"分组之间的并行\"></a>分组之间的并行</h4><p>！！！分组之间的并行性是完全并发，不同于以上三种的并行（类似于流水线处理）</p>\n<p><img src=\".%5Ctypora-user-images%5Cimage-20200727154656637.png\" alt=\"image-20200727154656637\"></p>\n<h3 id=\"并行性与高级命令\"><a href=\"#并行性与高级命令\" class=\"headerlink\" title=\"并行性与高级命令\"></a>并行性与高级命令</h3><h4 id=\"内部数据迁移命令\"><a href=\"#内部数据迁移命令\" class=\"headerlink\" title=\"内部数据迁移命令\"></a>内部数据迁移命令</h4><ul>\n<li><p>原理作用：对于高并行性的SSD，常常发现占用比例最高的是通道。芯片等的性能受到通道的限制。但是我们可以发现对于和主机没有交互的操作（内部数据的迁移），完全可以不占用通道的流量，从而提高性能。</p>\n</li>\n<li><p>限制：</p>\n<ol>\n<li>使用改命令要求目标的物理页地址的奇偶性相同（猜测：当高电位集中分布时会导致数据错误）</li>\n<li>同一个物理块内的空闲地址必须连续使用。</li>\n</ol>\n</li>\n<li><p>导致的问题：<img src=\".%5Ctypora-user-images%5Cimage-20200727161112234.png\" alt=\"image-20200727161112234\"></p>\n<p>第1217页没有使用直接被标记为失效，造成浪费。</p>\n</li>\n<li><p>对存在问题的两种解决方案：</p>\n<ol>\n<li>有条件的使用，不发生有效页的浪费。</li>\n<li>无条件的使用（贪婪的使用），任何情况下都使用内部迁移指令。</li>\n</ol>\n</li>\n<li><p>结论：方案二即无条件使用一般导致性能的下降，方案一在某些情况下可以提升性能。方案二的优化达不到预期效果是因为产生过多的失效页，导致垃圾回收次数的增加，同时垃圾回收又使用内部数据迁移命令，进一步产生大量失效页，引发恶性循环。<img src=\".%5Ctypora-user-images%5Cimage-20200727162451064.png\" alt=\"image-20200727162451064\"></p>\n</li>\n</ul>\n<h4 id=\"多分组操作指令\"><a href=\"#多分组操作指令\" class=\"headerlink\" title=\"多分组操作指令\"></a>多分组操作指令</h4><ul>\n<li>原理作用：利用分组之间的并行性。假设有两个写操作，直接将两个写数据读入某一晶圆的寄存器中，之后再将两个数据同时写入物理页中。</li>\n<li>限制：<ol>\n<li>并行的数据必须写入不同分组中具有相同物理块号，物理页号中</li>\n<li>同一个物理块内的空闲地址必须连续使用。</li>\n</ol>\n</li>\n<li>存在的问题：<img src=\".%5Ctypora-user-images%5Cimage-20200727164122872.png\" alt=\"image-20200727164122872\"></li>\n<li>对存在问题的两种解决方案（失效页的统一处理方案）：<ol>\n<li>有条件的使用，不发生有效页的浪费。</li>\n<li>无条件的使用（贪婪的使用），任何情况下都使用内部迁移指令。</li>\n</ol>\n</li>\n<li>结论：`与上一条指令结论相反，对性能的优化超过触发垃圾回收的性能损耗。</li>\n</ul>\n<h4 id=\"交错操作命令\"><a href=\"#交错操作命令\" class=\"headerlink\" title=\"交错操作命令\"></a>交错操作命令</h4><ul>\n<li>原理作用：多个晶圆之间的并行（见图2.5）流水操作</li>\n<li>限制：并行的指令操作在同个芯片的不同晶圆下。</li>\n<li>结论：所以情况下都可以提高性能，且对磨损几乎没有影响，因此贪婪的使用交错操作指令。<img src=\".%5Ctypora-user-images%5Cimage-20200727165835938.png\" alt=\"image-20200727165835938\"></li>\n</ul>\n<h4 id=\"综合使用高级命令\"><a href=\"#综合使用高级命令\" class=\"headerlink\" title=\"综合使用高级命令\"></a>综合使用高级命令</h4><ul>\n<li><p>目的：提高并行性</p>\n</li>\n<li><p>三种方案：</p>\n<ol>\n<li>不采用高级命令</li>\n<li>有条件的使用内部和多分组命令，贪婪的使用的交错命令</li>\n<li>有条件的使用内部数据迁移命令，贪婪的使用多分组和交错命令</li>\n</ol>\n</li>\n<li><p>结论：<img src=\".%5Ctypora-user-images%5Cimage-20200727170522240.png\" alt=\"image-20200727170522240\"></p>\n<p>方案3对性能提高最好；方案2性能提升不如方案3，但是其对擦写次数没有增加。综上，对性能敏感时，用方案3；重视SSD寿命时采用方案2.</p>\n</li>\n</ul>\n<h4 id=\"并行度优先级\"><a href=\"#并行度优先级\" class=\"headerlink\" title=\"并行度优先级\"></a>并行度优先级</h4><ul>\n<li><p>作用：不同层级的并行存在相互影响的情况，为了使带宽充分利用必须尽可能的让每个器件的使用效率达到最高。</p>\n</li>\n<li><p>排序：通道并行&gt;分组并行&gt;晶圆并行&gt;芯片并行</p>\n</li>\n<li><blockquote>\n<p>为保证通道占用率通道优先级最高。</p>\n<p>当一个写请求需要写个物理，以晶圆并行也可以分组并行，如图<img src=\".%5Ctypora-user-images%5Cimage-20200728102101042.png\" alt=\"image-20200728102101042\">将总线传输阶段细分成传输命令地址阶段和数传输阶段，相比分组并行，晶圆并行效率更高。多分组采用会导致有效页的损失，但是晶圆的并行只是交错命令，不会导致有效页的损失。</p>\n</blockquote>\n</li>\n</ul>\n"},{"_content":"> ## 闪存存储的重构与系统构建技术\n>\n> 陆游游 杨者 舒继武\n\n### 传统架构的问题与解决方案\n\n[TOC]\n\n\n\n#### 起因：\n\n历史原因，为兼容传统的磁盘读写接口引用了FTL（flash translation layer闪存转换层），造成冗余结构，没用充分发挥SSD自身的优势。\n\n#### 闪存特性\n\n1. 擦除写，只可以控制充电，放电直接归零。（猜测与闪存的不易失性相关，非可控掉电影响数据保存）\n\n2. 读写擦粒度不同，读写粒度为page（短百微妙级），擦除粒度为block（百毫秒级），为block的优势体现在避免频繁擦除降低性能\n\n3. 擦写次数有限，擦写次数过多时闪存单元的数据不可靠（电子元器件的损耗？）。\n\n4. 闪存转换层功能：\n\n   - 地址映射，从逻辑页到物理页\n\n   - 垃圾回收，将旧数据标记为失效，进入待回收，块内失效页达到一定数量对块进行擦除。\n\n   - 磨损均衡，对每个块的擦写次数近似相同，避免某些块提前报废，变为坏块。\n\n   - > 闪存转换层屏蔽了很多闪存介质的特性，但从\n     > 固态盘层次上仍具有一些与磁盘不同的表现．由于\n     > 固态盘内部存在通道级、芯片级、Ｐｌａｎｅ级等多个级\n     > 别的并发，固态盘 内 部可以 提供极高的，高 于当前\n     > ＳＡＴＡ 和ＰＣＩｅ接口的带宽．因而，固态盘在读操作\n     > 的带宽可接近于硬件接口带宽，写带宽由于闪存写\n     > 延迟稍高略低于读带宽．在随机读写方面，固态盘提\n     > 供了较好的随机读性能，但随机写性能较差．整体而\n     > 言，由于介质的差异，固态盘与磁盘存在较大的差异．\n\n#### 存在问题\n\n1. 功能冗余，存储系统软件和闪存转换层功能相近（地址映射等）\n2. 维度缺失，采用磁盘设计思维，没有考虑闪存特性。\n3. 优化错配？？？，引入trim命令\n\n#### 架构的演变\n\n1. 设备内FTL架构\n   - ![image-20200727104849870](.\\typora-user-images\\image-20200727104849870.png)\n2. 设备外FTL架构\n   - ![image-20200727104913310](.\\typora-user-images\\image-20200727104913310.png)\n3. 软件直管闪存架构\n   - ![image-20200727104918894](.\\typora-user-images\\image-20200727104918894.png)\n4. 开放可编程闪存架构\n   - ![image-20200727104923997](.\\typora-user-images\\image-20200727104923997.png)\n\n#### 开放通道的存储系统OC-SSD\n\n1. 文件系统，F2FS,DFS,ReconFS,OFSS,ALFS,ParaFS\n\n   > - #### 日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）\n   >\n   >   在很多日志文件系统（如：[ext3](http://zh.wikipedia.org/wiki/Ext3), [ReiserFS](http://zh.wikipedia.org/wiki/ReiserFS)）中，可以选择三个级别的日志：回写（writeback）、顺序（ordered）和数据（data）。\n   >\n   >   ##### 回写\n   >\n   >   在回写模式中，只有[元数据](http://zh.wikipedia.org/wiki/元数据)被记录到日志中，数据被直接写入主文件系统。这种模式提供较好的性能，但有较大的风险。例如，在增大文件时，数据还未写入就发生崩溃，那么文件系统恢复后文件后面就可能出现垃圾数据。\n   >\n   >   ##### 顺序\n   >\n   >   在顺序模式中，只有[元数据](http://zh.wikipedia.org/wiki/元数据)被记录到日志中，但在日志被标记为提交前，数据会被写入文件系统。在这种模式下，如果在增大文件时，数据还未写入就发生崩溃，那么在恢复时这个事务会被简单的撤销，文件保持原来的状态。\n   >\n   >   ##### 数据\n   >\n   >   在数据模式中，[元数据](http://zh.wikipedia.org/wiki/元数据)和文件内容都先被写入日志中，然后在提交到主文件系统。这提高了安全性，但损失性能，因为所有数据要写入两次[[1\\]](http://zh.wikipedia.org/wiki/日志文件系统#cite_note-ibm-1)。在这种模式下，如果在增大文件时，发生崩溃，那么可能有两种情况：\n   >\n   >   - 日志完整：这时事务会被重新执行，修改会被提交到主文件系统\n   >   - 日志不完整：这时主文件系统还未被修改，只需要简单放弃这个事务\n\n2. 键值存储系统，LOCS，DIDA-Cache，FlashKV\n\n3. 分布式存储系统，OCStore\n\n#### 近数据闪存系统\n\n1. 事务闪存\n2. 对象闪存\n3. 设备内文件系统\n4. 专用加速内存\n5. 通用加速内存","source":"_posts/闪存存储的重构与系统构建技术.md","raw":"> ## 闪存存储的重构与系统构建技术\n>\n> 陆游游 杨者 舒继武\n\n### 传统架构的问题与解决方案\n\n[TOC]\n\n\n\n#### 起因：\n\n历史原因，为兼容传统的磁盘读写接口引用了FTL（flash translation layer闪存转换层），造成冗余结构，没用充分发挥SSD自身的优势。\n\n#### 闪存特性\n\n1. 擦除写，只可以控制充电，放电直接归零。（猜测与闪存的不易失性相关，非可控掉电影响数据保存）\n\n2. 读写擦粒度不同，读写粒度为page（短百微妙级），擦除粒度为block（百毫秒级），为block的优势体现在避免频繁擦除降低性能\n\n3. 擦写次数有限，擦写次数过多时闪存单元的数据不可靠（电子元器件的损耗？）。\n\n4. 闪存转换层功能：\n\n   - 地址映射，从逻辑页到物理页\n\n   - 垃圾回收，将旧数据标记为失效，进入待回收，块内失效页达到一定数量对块进行擦除。\n\n   - 磨损均衡，对每个块的擦写次数近似相同，避免某些块提前报废，变为坏块。\n\n   - > 闪存转换层屏蔽了很多闪存介质的特性，但从\n     > 固态盘层次上仍具有一些与磁盘不同的表现．由于\n     > 固态盘内部存在通道级、芯片级、Ｐｌａｎｅ级等多个级\n     > 别的并发，固态盘 内 部可以 提供极高的，高 于当前\n     > ＳＡＴＡ 和ＰＣＩｅ接口的带宽．因而，固态盘在读操作\n     > 的带宽可接近于硬件接口带宽，写带宽由于闪存写\n     > 延迟稍高略低于读带宽．在随机读写方面，固态盘提\n     > 供了较好的随机读性能，但随机写性能较差．整体而\n     > 言，由于介质的差异，固态盘与磁盘存在较大的差异．\n\n#### 存在问题\n\n1. 功能冗余，存储系统软件和闪存转换层功能相近（地址映射等）\n2. 维度缺失，采用磁盘设计思维，没有考虑闪存特性。\n3. 优化错配？？？，引入trim命令\n\n#### 架构的演变\n\n1. 设备内FTL架构\n   - ![image-20200727104849870](.\\typora-user-images\\image-20200727104849870.png)\n2. 设备外FTL架构\n   - ![image-20200727104913310](.\\typora-user-images\\image-20200727104913310.png)\n3. 软件直管闪存架构\n   - ![image-20200727104918894](.\\typora-user-images\\image-20200727104918894.png)\n4. 开放可编程闪存架构\n   - ![image-20200727104923997](.\\typora-user-images\\image-20200727104923997.png)\n\n#### 开放通道的存储系统OC-SSD\n\n1. 文件系统，F2FS,DFS,ReconFS,OFSS,ALFS,ParaFS\n\n   > - #### 日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）\n   >\n   >   在很多日志文件系统（如：[ext3](http://zh.wikipedia.org/wiki/Ext3), [ReiserFS](http://zh.wikipedia.org/wiki/ReiserFS)）中，可以选择三个级别的日志：回写（writeback）、顺序（ordered）和数据（data）。\n   >\n   >   ##### 回写\n   >\n   >   在回写模式中，只有[元数据](http://zh.wikipedia.org/wiki/元数据)被记录到日志中，数据被直接写入主文件系统。这种模式提供较好的性能，但有较大的风险。例如，在增大文件时，数据还未写入就发生崩溃，那么文件系统恢复后文件后面就可能出现垃圾数据。\n   >\n   >   ##### 顺序\n   >\n   >   在顺序模式中，只有[元数据](http://zh.wikipedia.org/wiki/元数据)被记录到日志中，但在日志被标记为提交前，数据会被写入文件系统。在这种模式下，如果在增大文件时，数据还未写入就发生崩溃，那么在恢复时这个事务会被简单的撤销，文件保持原来的状态。\n   >\n   >   ##### 数据\n   >\n   >   在数据模式中，[元数据](http://zh.wikipedia.org/wiki/元数据)和文件内容都先被写入日志中，然后在提交到主文件系统。这提高了安全性，但损失性能，因为所有数据要写入两次[[1\\]](http://zh.wikipedia.org/wiki/日志文件系统#cite_note-ibm-1)。在这种模式下，如果在增大文件时，发生崩溃，那么可能有两种情况：\n   >\n   >   - 日志完整：这时事务会被重新执行，修改会被提交到主文件系统\n   >   - 日志不完整：这时主文件系统还未被修改，只需要简单放弃这个事务\n\n2. 键值存储系统，LOCS，DIDA-Cache，FlashKV\n\n3. 分布式存储系统，OCStore\n\n#### 近数据闪存系统\n\n1. 事务闪存\n2. 对象闪存\n3. 设备内文件系统\n4. 专用加速内存\n5. 通用加速内存","slug":"闪存存储的重构与系统构建技术","published":1,"date":"2020-07-28T16:51:01.026Z","updated":"2020-07-29T02:51:44.073Z","title":"闪存存储的重构与系统构建技术","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8sdksj000414v77mypdyau","content":"<blockquote>\n<h2 id=\"闪存存储的重构与系统构建技术\"><a href=\"#闪存存储的重构与系统构建技术\" class=\"headerlink\" title=\"闪存存储的重构与系统构建技术\"></a>闪存存储的重构与系统构建技术</h2><p>陆游游 杨者 舒继武</p>\n</blockquote>\n<h3 id=\"传统架构的问题与解决方案\"><a href=\"#传统架构的问题与解决方案\" class=\"headerlink\" title=\"传统架构的问题与解决方案\"></a>传统架构的问题与解决方案</h3><p>[TOC]</p>\n<h4 id=\"起因：\"><a href=\"#起因：\" class=\"headerlink\" title=\"起因：\"></a>起因：</h4><p>历史原因，为兼容传统的磁盘读写接口引用了FTL（flash translation layer闪存转换层），造成冗余结构，没用充分发挥SSD自身的优势。</p>\n<h4 id=\"闪存特性\"><a href=\"#闪存特性\" class=\"headerlink\" title=\"闪存特性\"></a>闪存特性</h4><ol>\n<li><p>擦除写，只可以控制充电，放电直接归零。（猜测与闪存的不易失性相关，非可控掉电影响数据保存）</p>\n</li>\n<li><p>读写擦粒度不同，读写粒度为page（短百微妙级），擦除粒度为block（百毫秒级），为block的优势体现在避免频繁擦除降低性能</p>\n</li>\n<li><p>擦写次数有限，擦写次数过多时闪存单元的数据不可靠（电子元器件的损耗？）。</p>\n</li>\n<li><p>闪存转换层功能：</p>\n<ul>\n<li><p>地址映射，从逻辑页到物理页</p>\n</li>\n<li><p>垃圾回收，将旧数据标记为失效，进入待回收，块内失效页达到一定数量对块进行擦除。</p>\n</li>\n<li><p>磨损均衡，对每个块的擦写次数近似相同，避免某些块提前报废，变为坏块。</p>\n</li>\n<li><blockquote>\n<p>闪存转换层屏蔽了很多闪存介质的特性，但从<br>固态盘层次上仍具有一些与磁盘不同的表现．由于<br>固态盘内部存在通道级、芯片级、Ｐｌａｎｅ级等多个级<br>别的并发，固态盘 内 部可以 提供极高的，高 于当前<br>ＳＡＴＡ 和ＰＣＩｅ接口的带宽．因而，固态盘在读操作<br>的带宽可接近于硬件接口带宽，写带宽由于闪存写<br>延迟稍高略低于读带宽．在随机读写方面，固态盘提<br>供了较好的随机读性能，但随机写性能较差．整体而<br>言，由于介质的差异，固态盘与磁盘存在较大的差异．</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h4><ol>\n<li>功能冗余，存储系统软件和闪存转换层功能相近（地址映射等）</li>\n<li>维度缺失，采用磁盘设计思维，没有考虑闪存特性。</li>\n<li>优化错配？？？，引入trim命令</li>\n</ol>\n<h4 id=\"架构的演变\"><a href=\"#架构的演变\" class=\"headerlink\" title=\"架构的演变\"></a>架构的演变</h4><ol>\n<li>设备内FTL架构<ul>\n<li><img src=\".%5Ctypora-user-images%5Cimage-20200727104849870.png\" alt=\"image-20200727104849870\"></li>\n</ul>\n</li>\n<li>设备外FTL架构<ul>\n<li><img src=\".%5Ctypora-user-images%5Cimage-20200727104913310.png\" alt=\"image-20200727104913310\"></li>\n</ul>\n</li>\n<li>软件直管闪存架构<ul>\n<li><img src=\".%5Ctypora-user-images%5Cimage-20200727104918894.png\" alt=\"image-20200727104918894\"></li>\n</ul>\n</li>\n<li>开放可编程闪存架构<ul>\n<li><img src=\".%5Ctypora-user-images%5Cimage-20200727104923997.png\" alt=\"image-20200727104923997\"></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"开放通道的存储系统OC-SSD\"><a href=\"#开放通道的存储系统OC-SSD\" class=\"headerlink\" title=\"开放通道的存储系统OC-SSD\"></a>开放通道的存储系统OC-SSD</h4><ol>\n<li><p>文件系统，F2FS,DFS,ReconFS,OFSS,ALFS,ParaFS</p>\n<blockquote>\n<ul>\n<li><h4 id=\"日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）\"><a href=\"#日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）\" class=\"headerlink\" title=\"日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）\"></a>日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）</h4><p>在很多日志文件系统（如：<a href=\"http://zh.wikipedia.org/wiki/Ext3\" target=\"_blank\" rel=\"noopener\">ext3</a>, <a href=\"http://zh.wikipedia.org/wiki/ReiserFS\" target=\"_blank\" rel=\"noopener\">ReiserFS</a>）中，可以选择三个级别的日志：回写（writeback）、顺序（ordered）和数据（data）。</p>\n<h5 id=\"回写\"><a href=\"#回写\" class=\"headerlink\" title=\"回写\"></a>回写</h5><p>在回写模式中，只有<a href=\"http://zh.wikipedia.org/wiki/元数据\" target=\"_blank\" rel=\"noopener\">元数据</a>被记录到日志中，数据被直接写入主文件系统。这种模式提供较好的性能，但有较大的风险。例如，在增大文件时，数据还未写入就发生崩溃，那么文件系统恢复后文件后面就可能出现垃圾数据。</p>\n<h5 id=\"顺序\"><a href=\"#顺序\" class=\"headerlink\" title=\"顺序\"></a>顺序</h5><p>在顺序模式中，只有<a href=\"http://zh.wikipedia.org/wiki/元数据\" target=\"_blank\" rel=\"noopener\">元数据</a>被记录到日志中，但在日志被标记为提交前，数据会被写入文件系统。在这种模式下，如果在增大文件时，数据还未写入就发生崩溃，那么在恢复时这个事务会被简单的撤销，文件保持原来的状态。</p>\n<h5 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h5><p>在数据模式中，<a href=\"http://zh.wikipedia.org/wiki/元数据\" target=\"_blank\" rel=\"noopener\">元数据</a>和文件内容都先被写入日志中，然后在提交到主文件系统。这提高了安全性，但损失性能，因为所有数据要写入两次<a href=\"http://zh.wikipedia.org/wiki/日志文件系统#cite_note-ibm-1\" target=\"_blank\" rel=\"noopener\">[1]</a>。在这种模式下，如果在增大文件时，发生崩溃，那么可能有两种情况：</p>\n<ul>\n<li>日志完整：这时事务会被重新执行，修改会被提交到主文件系统</li>\n<li>日志不完整：这时主文件系统还未被修改，只需要简单放弃这个事务</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>键值存储系统，LOCS，DIDA-Cache，FlashKV</p>\n</li>\n<li><p>分布式存储系统，OCStore</p>\n</li>\n</ol>\n<h4 id=\"近数据闪存系统\"><a href=\"#近数据闪存系统\" class=\"headerlink\" title=\"近数据闪存系统\"></a>近数据闪存系统</h4><ol>\n<li>事务闪存</li>\n<li>对象闪存</li>\n<li>设备内文件系统</li>\n<li>专用加速内存</li>\n<li>通用加速内存</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h2 id=\"闪存存储的重构与系统构建技术\"><a href=\"#闪存存储的重构与系统构建技术\" class=\"headerlink\" title=\"闪存存储的重构与系统构建技术\"></a>闪存存储的重构与系统构建技术</h2><p>陆游游 杨者 舒继武</p>\n</blockquote>\n<h3 id=\"传统架构的问题与解决方案\"><a href=\"#传统架构的问题与解决方案\" class=\"headerlink\" title=\"传统架构的问题与解决方案\"></a>传统架构的问题与解决方案</h3><p>[TOC]</p>\n<h4 id=\"起因：\"><a href=\"#起因：\" class=\"headerlink\" title=\"起因：\"></a>起因：</h4><p>历史原因，为兼容传统的磁盘读写接口引用了FTL（flash translation layer闪存转换层），造成冗余结构，没用充分发挥SSD自身的优势。</p>\n<h4 id=\"闪存特性\"><a href=\"#闪存特性\" class=\"headerlink\" title=\"闪存特性\"></a>闪存特性</h4><ol>\n<li><p>擦除写，只可以控制充电，放电直接归零。（猜测与闪存的不易失性相关，非可控掉电影响数据保存）</p>\n</li>\n<li><p>读写擦粒度不同，读写粒度为page（短百微妙级），擦除粒度为block（百毫秒级），为block的优势体现在避免频繁擦除降低性能</p>\n</li>\n<li><p>擦写次数有限，擦写次数过多时闪存单元的数据不可靠（电子元器件的损耗？）。</p>\n</li>\n<li><p>闪存转换层功能：</p>\n<ul>\n<li><p>地址映射，从逻辑页到物理页</p>\n</li>\n<li><p>垃圾回收，将旧数据标记为失效，进入待回收，块内失效页达到一定数量对块进行擦除。</p>\n</li>\n<li><p>磨损均衡，对每个块的擦写次数近似相同，避免某些块提前报废，变为坏块。</p>\n</li>\n<li><blockquote>\n<p>闪存转换层屏蔽了很多闪存介质的特性，但从<br>固态盘层次上仍具有一些与磁盘不同的表现．由于<br>固态盘内部存在通道级、芯片级、Ｐｌａｎｅ级等多个级<br>别的并发，固态盘 内 部可以 提供极高的，高 于当前<br>ＳＡＴＡ 和ＰＣＩｅ接口的带宽．因而，固态盘在读操作<br>的带宽可接近于硬件接口带宽，写带宽由于闪存写<br>延迟稍高略低于读带宽．在随机读写方面，固态盘提<br>供了较好的随机读性能，但随机写性能较差．整体而<br>言，由于介质的差异，固态盘与磁盘存在较大的差异．</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h4><ol>\n<li>功能冗余，存储系统软件和闪存转换层功能相近（地址映射等）</li>\n<li>维度缺失，采用磁盘设计思维，没有考虑闪存特性。</li>\n<li>优化错配？？？，引入trim命令</li>\n</ol>\n<h4 id=\"架构的演变\"><a href=\"#架构的演变\" class=\"headerlink\" title=\"架构的演变\"></a>架构的演变</h4><ol>\n<li>设备内FTL架构<ul>\n<li><img src=\".%5Ctypora-user-images%5Cimage-20200727104849870.png\" alt=\"image-20200727104849870\"></li>\n</ul>\n</li>\n<li>设备外FTL架构<ul>\n<li><img src=\".%5Ctypora-user-images%5Cimage-20200727104913310.png\" alt=\"image-20200727104913310\"></li>\n</ul>\n</li>\n<li>软件直管闪存架构<ul>\n<li><img src=\".%5Ctypora-user-images%5Cimage-20200727104918894.png\" alt=\"image-20200727104918894\"></li>\n</ul>\n</li>\n<li>开放可编程闪存架构<ul>\n<li><img src=\".%5Ctypora-user-images%5Cimage-20200727104923997.png\" alt=\"image-20200727104923997\"></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"开放通道的存储系统OC-SSD\"><a href=\"#开放通道的存储系统OC-SSD\" class=\"headerlink\" title=\"开放通道的存储系统OC-SSD\"></a>开放通道的存储系统OC-SSD</h4><ol>\n<li><p>文件系统，F2FS,DFS,ReconFS,OFSS,ALFS,ParaFS</p>\n<blockquote>\n<ul>\n<li><h4 id=\"日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）\"><a href=\"#日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）\" class=\"headerlink\" title=\"日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）\"></a>日志的三个级别（书里写的关于回写和顺序两种模式不同的更细节的解释）</h4><p>在很多日志文件系统（如：<a href=\"http://zh.wikipedia.org/wiki/Ext3\" target=\"_blank\" rel=\"noopener\">ext3</a>, <a href=\"http://zh.wikipedia.org/wiki/ReiserFS\" target=\"_blank\" rel=\"noopener\">ReiserFS</a>）中，可以选择三个级别的日志：回写（writeback）、顺序（ordered）和数据（data）。</p>\n<h5 id=\"回写\"><a href=\"#回写\" class=\"headerlink\" title=\"回写\"></a>回写</h5><p>在回写模式中，只有<a href=\"http://zh.wikipedia.org/wiki/元数据\" target=\"_blank\" rel=\"noopener\">元数据</a>被记录到日志中，数据被直接写入主文件系统。这种模式提供较好的性能，但有较大的风险。例如，在增大文件时，数据还未写入就发生崩溃，那么文件系统恢复后文件后面就可能出现垃圾数据。</p>\n<h5 id=\"顺序\"><a href=\"#顺序\" class=\"headerlink\" title=\"顺序\"></a>顺序</h5><p>在顺序模式中，只有<a href=\"http://zh.wikipedia.org/wiki/元数据\" target=\"_blank\" rel=\"noopener\">元数据</a>被记录到日志中，但在日志被标记为提交前，数据会被写入文件系统。在这种模式下，如果在增大文件时，数据还未写入就发生崩溃，那么在恢复时这个事务会被简单的撤销，文件保持原来的状态。</p>\n<h5 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h5><p>在数据模式中，<a href=\"http://zh.wikipedia.org/wiki/元数据\" target=\"_blank\" rel=\"noopener\">元数据</a>和文件内容都先被写入日志中，然后在提交到主文件系统。这提高了安全性，但损失性能，因为所有数据要写入两次<a href=\"http://zh.wikipedia.org/wiki/日志文件系统#cite_note-ibm-1\" target=\"_blank\" rel=\"noopener\">[1]</a>。在这种模式下，如果在增大文件时，发生崩溃，那么可能有两种情况：</p>\n<ul>\n<li>日志完整：这时事务会被重新执行，修改会被提交到主文件系统</li>\n<li>日志不完整：这时主文件系统还未被修改，只需要简单放弃这个事务</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>键值存储系统，LOCS，DIDA-Cache，FlashKV</p>\n</li>\n<li><p>分布式存储系统，OCStore</p>\n</li>\n</ol>\n<h4 id=\"近数据闪存系统\"><a href=\"#近数据闪存系统\" class=\"headerlink\" title=\"近数据闪存系统\"></a>近数据闪存系统</h4><ol>\n<li>事务闪存</li>\n<li>对象闪存</li>\n<li>设备内文件系统</li>\n<li>专用加速内存</li>\n<li>通用加速内存</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}